// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	budgetdto "shared-wallet-service/domain/budget/dto"

	dto "shared-wallet-service/domain/team/dto"

	mock "github.com/stretchr/testify/mock"
)

// ITeamRepository is an autogenerated mock type for the ITeamRepository type
type ITeamRepository struct {
	mock.Mock
}

// ComposeTeam provides a mock function with given fields: ctx, _a1
func (_m *ITeamRepository) ComposeTeam(ctx context.Context, _a1 dto.Team) (int64, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ComposeTeam")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Team) (int64, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Team) int64); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Team) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecomposeTeam provides a mock function with given fields: ctx, _a1
func (_m *ITeamRepository) DecomposeTeam(ctx context.Context, _a1 dto.Team) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DecomposeTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Team) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistUserInTeam provides a mock function with given fields: ctx, id
func (_m *ITeamRepository) ExistUserInTeam(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ExistUserInTeam")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamByBudget provides a mock function with given fields: ctx, code
func (_m *ITeamRepository) GetTeamByBudget(ctx context.Context, code string) ([]string, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamByBudget")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamsByUser provides a mock function with given fields: ctx, code
func (_m *ITeamRepository) GetTeamsByUser(ctx context.Context, code string) ([]budgetdto.Budget, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamsByUser")
	}

	var r0 []budgetdto.Budget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]budgetdto.Budget, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []budgetdto.Budget); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]budgetdto.Budget)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewITeamRepository creates a new instance of ITeamRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITeamRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITeamRepository {
	mock := &ITeamRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
