// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	request "shared-wallet-service/interfaces/dto/request"

	mock "github.com/stretchr/testify/mock"

	response "shared-wallet-service/interfaces/dto/response"
)

// IBudgetUseCase is an autogenerated mock type for the IBudgetUseCase type
type IBudgetUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, budgetRequest
func (_m *IBudgetUseCase) Create(ctx context.Context, budgetRequest request.BudgetRequest) error {
	ret := _m.Called(ctx, budgetRequest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.BudgetRequest) error); ok {
		r0 = rf(ctx, budgetRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, code
func (_m *IBudgetUseCase) Delete(ctx context.Context, code string) error {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *IBudgetUseCase) GetAll(ctx context.Context) ([]response.BudgetResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []response.BudgetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]response.BudgetResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []response.BudgetResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.BudgetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCode provides a mock function with given fields: ctx, code
func (_m *IBudgetUseCase) GetByCode(ctx context.Context, code string) (response.BudgetResponse, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetByCode")
	}

	var r0 response.BudgetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (response.BudgetResponse, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) response.BudgetResponse); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(response.BudgetResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDebtByCode provides a mock function with given fields: ctx, budgetRequest
func (_m *IBudgetUseCase) UpdateDebtByCode(ctx context.Context, budgetRequest request.BudgetRequest) error {
	ret := _m.Called(ctx, budgetRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDebtByCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.BudgetRequest) error); ok {
		r0 = rf(ctx, budgetRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIBudgetUseCase creates a new instance of IBudgetUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBudgetUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBudgetUseCase {
	mock := &IBudgetUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
